#!/usr/bin/env node

'use strict';

const os = require('os');
const path = require('path');

const Cluster = require('./cluster/cluster');
const Broker = require('./broker/broker');
const Client = require('./broker/request');
const Common = require('./broker/common')

const DB = './cluster.db';

function getExternalIP() {
    let interfaces = os.networkInterfaces();
    for (let name  in interfaces) {
        if (name.startsWith('eth')) {
            return interfaces[name].filter(i => {return !i.internal; }).filter(i => {return i.family === 'IPv4'}).pop().address;
        }
    }
}

var cmd = process.argv[2];
switch (cmd) {
    case 'add':{
        const cluster = new Cluster(DB);
        const host = process.argv[3];
        const user = process.argv[4];
        const pass = process.argv[5];
        cluster.add(host, user, pass);
        break;
    }
    
    case 'remove': {
        const cluster = new Cluster(DB);
        const host = process.argv[3];
        cluster.remove(host);
        break;
    }
    
    case 'run': {
        const id = Math.random().toString(26).slice(2);

        const broker = new Broker({port: 9999});
        broker.start();        

       const dir = path.resolve(process.argv[3]);
       const argument = process.argv[4];
       
        const cluster = new Cluster(DB);
        cluster
            .deploy(['./bundle', dir])
            .run('./bundle/run', [dir, getExternalIP() || '127.0.0.1', 9999]);                
        
        
        const client = new Client({port: 9999});
                
        process.on('SIGINT', function() {
            client.unsubscribe(Common.TYPE.QUEUE, 'ready');
            client.unsubscribe(Common.TYPE.QUEUE, 'result');
            
            client.send(Common.CMD.TOPIC, 'shutdown');
            
            client.close();
            broker.stop();
            
            process.exit();
        });

        const nodes = [];
        
        client.open()
            .on('connected', () => {
                client.subscribe(Common.TYPE.QUEUE, 'ready');
                client.subscribe(Common.TYPE.QUEUE, 'result');        
            })
            .on('message', (message) => {
                switch (message.name) {
                    case 'ready': {
                        nodes.push(message.body.id);
                        console.log(`Node ${message.body.id} is ready`);
                        if (nodes.length === cluster.size()) {
                            console.log('Cluster is ready. Go!');
                            
                            client.send(Common.TYPE.TOPIC, 'info', { nodes: nodes });
                            
                            process.stdin.setEncoding('utf8');
                            let line = 0;
                            let counter = 0;
                            process.stdin.on('readable', () => {
                              const chunk = process.stdin.read();
                              if (chunk) {
                                chunk.toString().split(os.EOL).filter(Boolean).forEach(value => {                                        
                                        counter++;
                                        client.query('mapper', { line: line++, value: value, argument: argument }, () => {
                                            if (--counter === 0) {
                                                client.send(Common.TYPE.TOPIC, 'continue');
                                            }                        
                                        });                                    
                                });                
                              }
                            });                            
                        }
                        break;
                    }
                    
                    case 'result' : {
                        console.log(`${message.body.key} -> ${message.body.value}`);
                        break;
                    }
                }            
            });        
        break;
    }
}



