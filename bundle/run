#!/usr/bin/env node

'use strict';

const Client = require('../broker/request');

const id  = Math.random().toString(26).slice(2);

const path = process.argv[2];
const Mapper = require(path + '/mapper');
const Reducer = require(path + '/reducer');

const host = process.argv[3] || 'localhost';
const port = process.argv[4] || 9999;

function hashCode(s) {
    s = String(s);
    let ch, hash = 0;
    if (s.length == 0) return hash;
    var length = s.length <= 32 ? s.length : 32;
    for (let i=0; i<length; i++) {
        ch = s.charCodeAt(i);
        hash = ((hash << 5) - hash) + ch;
        hash = hash & hash;
    }
    return hash & 0x7fffffff;
}


const client = new Client({hostname: host, port: port});

client.open()
    .on('connected', () => {
        console.log('connected ', id);
    
        let nodes = [id];
        const shuffler = new Map();
    
        client.subscribe('TOPIC', 'info');
        client.subscribe('TOPIC', 'shutdown');    
        client.subscribe('TOPIC', 'continue');
        
        client.subscribe('QUEUE', id);
        client.subscribe('QUEUE', 'mapper');
        client.subscribe('QUEUE', 'reducer');

        client.send('QUEUE','ready',{id: id});
    
        client.on('message', (message) => {
            switch (message.name) {
                case 'info': {
                    nodes = message.body.nodes;
                    break;
                }

                case 'mapper': {
                    const result = Mapper(message.body);
                    if (result && result.length > 0) {
                        let counter = result.length;
                        result.forEach(m => {
                            const name = nodes[hashCode(m.key) % nodes.length];
                            client.query(name, m, () => {
                                if (--counter === 0) {
                                   client.response(message.sessionId); 
                                }
                            });
                        });
                    } else {
                        client.response(message.sessionId);
                    }
                    break;
                }
                case id: {
                    if (shuffler.has(message.body.key)) {
                        shuffler.get(message.body.key).push(message.body.value);
                    } else {
                        shuffler.set(message.body.key, [message.body.value]);
                    }
                    client.response(message.sessionId);
                    break;
                }
                
                case 'continue': {
                    for(let [key, values] of shuffler) {
                        client.send('QUEUE', 'reducer', {key: key, values: values});
                    }
                    break;
                }

                case 'reducer': {
                    client.send('QUEUE', 'result', Reducer(message.body.key, message.body.values));
                    break;
                }
    
                case 'shutdown': {
                    client.unsubscribe('TOPIC', 'info');
                    client.unsubscribe('TOPIC', 'shutdown');    
                    client.unsubscribe('TOPIC', 'continue');
                    
                    client.unsubscribe('QUEUE', 'mapper');
                    client.unsubscribe('QUEUE', 'reducer');
                    client.unsubscribe('QUEUE', id);
                    
                    client.close();
                    process.exit();
                }
            }    
        });
    });
    